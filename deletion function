#include <stdio.h>
#include <stdlib.h>
typedef struct Node 
{
int data;
struct Node* left;
struct Node* right;
} Node;
Node* createNode(int data) 
{
Node* newNode = (Node*)malloc(sizeof(Node));
if (!newNode)
{
printf("Memory allocation failed\n");
exit(1);
}
newNode->data = data;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
Node* insertNode(Node* root, int data) 
{
if (root == NULL) 
{
return createNode(data);
}
if (data < root->data)
{
root->left = insertNode(root->left, data);
} else if (data > root->data) 
{
root->right = insertNode(root->right, data);
}
return root;
}
Node* findMin(Node* root) 
{
while (root->left != NULL)
{
root = root->left;
}
return root;
}
Node* deleteNode(Node* root, int data)
{
if (root == NULL) 
{
return root; 
}
if (data < root->data)
{
root->left = deleteNode(root->left, data);
}
else if(data > root->data) 
{
root->right = deleteNode(root->right, data);
} 
else 
{
if (root->left == NULL && root->right == NULL) 
{
free(root);
return NULL;
}
if (root->left == NULL) 
{
Node* temp = root->right;
free(root);
return temp;
}
if (root->right == NULL)
{
Node* temp = root->left;
free(root);
return temp;
}
Node* temp = findMin(root->right); 
root->data = temp->data; 
root->right = deleteNode(root->right, temp->data);
}
return root;
}
void inOrderTraversal(Node* root)
{
if (root != NULL)
{
inOrderTraversal(root->left);
 printf("%d ", root->data);
inOrderTraversal(root->right);
}
}
void freeTree(Node* root) 
{
if (root != NULL)
{
freeTree(root->left);
freeTree(root->right);
free(root);
}
}
int main()
{
Node* root = NULL;
int choice, data;
while (1) 
{
printf("\nBinary Search Tree Operations:\n");
printf("1. Insert Node\n");
printf("2. Delete Node\n");
printf("3. Display In-Order Traversal (Sorted Order)\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice)
{
case 1:
printf("Enter data to insert: ");
scanf("%d", &data);
root = insertNode(root, data);
break;
case 2:
printf("Enter data to delete: ");
scanf("%d", &data);
root = deleteNode(root, data);
break;
case 3:
printf("In-Order Traversal (Sorted Order): ");
inOrderTraversal(root);
printf("\n");
break;
case 4:
freeTree(root);
exit(0);
default:
printf("Invalid choice. Please enter a number between 1 and 4.\n");
}
}
return 0;
}
