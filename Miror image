#include <stdio.h>
#include <stdlib.h>
typedef struct Node 
{
int data;
struct Node* left;
struct Node* right;
} 
Node;
Node* createNode(int data)
{
Node* newNode = (Node*)malloc(sizeof(Node));
newNode->data = data;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
Node* insert(Node* root, int data)
{
if (root == NULL) 
{
return createNode(data);
}
if (data < root->data) 
{
root->left = insert(root->left, data);
}
else
{
root->right = insert(root->right, data);
}
return root;
}
void printInOrder(Node* root)
{
if (root == NULL) 
{
return;
}
printInOrder(root->left);
printf("%d ", root->data);
printInOrder(root->right);
}
Node* mirror(Node* root)
{
if (root == NULL) 
{
return NULL;
}
Node* newRoot = createNode(root->data);
newRoot->left = mirror(root->right);
newRoot->right = mirror(root->left);
return newRoot;
}
void freeTree(Node* root)
{
if (root == NULL)
{
return;
}
freeTree(root->left);
freeTree(root->right);
free(root);
}
int main()
{
Node* root = NULL;
root = insert(root, 4);
insert(root, 2);
insert(root, 6);
insert(root, 1);
insert(root, 3);
insert(root, 5);
insert(root, 7);
printf("Original Tree (In-order): ");
printInOrder(root);
printf("\n");
Node* mirroredRoot = mirror(root);
printf("Mirrored Tree (In-order): ");
printInOrder(mirroredRoot);
printf("\n");
freeTree(root);
freeTree(mirroredRoot);
return 0;
}
