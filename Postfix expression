#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
typedef struct Node
{
char data;
struct Node* left;
struct Node* right;
}
Node;
Node* createNode(char data)
{
Node* newNode = (Node*)malloc(sizeof(Node));
newNode->data = data;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
int evaluate(Node* root)
{
if (root == NULL) 
{
return 0;
}
if (root->left == NULL && root->right == NULL) 
{
return root->data - '0';
}
int leftValue = evaluate(root->left);
int rightValue = evaluate(root->right);
switch (root->data) 
{
case '+': return leftValue + rightValue;
case '-': return leftValue - rightValue;
case '*': return leftValue * rightValue;
case '/': return leftValue / rightValue;
default: return 0;
}
}
Node* constructExpressionTree(char* postfix)
{
Node* stack[100];
int top = -1;
int i = 0;
while (postfix[i] != '\0')
{
if (isdigit(postfix[i]))
{
stack[++top] = createNode(postfix[i]);
}
else if (postfix[i] == '+' || postfix[i] == '-' ||
postfix[i] == '*' || postfix[i] == '/')
{
Node* operatorNode = createNode(postfix[i]);
operatorNode->right = stack[top--];
operatorNode->left = stack[top--];
stack[++top] = operatorNode;
}
i++;
}
return stack[top];
}
void freeTree(Node* root)
{
if (root == NULL) 
{
return;
}
freeTree(root->left);
freeTree(root->right);
free(root);
}
int main()
{
char postfix[] = "23*54*+9-"; // Example postfix expression: (2*3) + (5*4) - 9
Node* root = constructExpressionTree(postfix);
printf("Postfix Expression: %s\n", postfix);
printf("Evaluated Result: %d\n", evaluate(root));
freeTree(root);
return 0;
}
