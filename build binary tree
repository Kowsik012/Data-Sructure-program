#include <stdio.h>
#include <stdlib.h>
typedef struct Node 
{
int data;
struct Node* left;
struct Node* right;
} 
Node;
Node* createNode(int data) 
{
Node* newNode = (Node*)malloc(sizeof(Node));
if (!newNode) 
{
printf("Memory allocation failed\n");
exit(1);
}
newNode->data = data;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
Node* insertNode(Node* root, int data) 
{
if (root == NULL) 
{
return createNode(data);
}
if (data < root->data) 
{
root->left = insertNode(root->left, data);
} else 
{
root->right = insertNode(root->right, data);
}
return root;
}
void inOrderTraversal(Node* root) 
{
if (root != NULL) 
{
inOrderTraversal(root->left);
printf("%d ", root->data);
inOrderTraversal(root->right);
}
}
void freeTree(Node* root) 
{
if (root != NULL) 
{
freeTree(root->left);
freeTree(root->right);
free(root);
}
}
int main() 
{
Node* root = NULL;
int choice, data;
while (1) 
{
printf("\nBinary Tree Operations:\n");
printf("1. Insert Node\n");
printf("2. Display In-Order Traversal\n");
printf("3. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) 
{
case 1:
printf("Enter data to insert: ");
scanf("%d", &data);
root = insertNode(root, data);
break;
case 2:
printf("In-Order Traversal: ");
inOrderTraversal(root);
printf("\n");
break;
case 3:
freeTree(root);
exit(0);
default:
printf("Invalid choice. Please enter a number between 1 and 3.\n");
}
}
return 0;
}
